public interface List<E> extends Collection<E> {
    Iterator<E> iterator();
    boolean add(E e);
}
public abstract class AbstractList<E>{
    protected transient int modCount = 0;
}
public class ArrayList<E> extends AbstractList<E> implements List<E>{
    public E get(int index) {
        Objects.checkIndex(index, size);
        return elementData(index);
    }
    public boolean add(E e) {
            modCount++;
        add(e, elementData, size);
        return true;
    }
    public Iterator<E> iterator() {
        return new Itr();
    }
    private class Itr implements Iterator<E> {
        int cursor;       // index of next element to return
        int lastRet = -1; // index of last element returned; -1 if no such
        int expectedModCount = modCount= 0;
        /*
            modCount实际修改集合的次数
            expectedModCount预期修改集合的次数
        */
        public E next() {
            checkForComodification();
            int i = cursor;
            if (i >= size)
                throw new NoSuchElementException();
            Object[] elementData = ArrayList.this.elementData;
            if (i >= elementData.length)
                throw new ConcurrentModificationException();
            cursor = i + 1;
            return (E) elementData[lastRet = i];
        }

        final void checkForComodification() {
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }
    }
}